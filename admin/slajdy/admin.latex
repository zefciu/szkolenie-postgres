\documentclass{beamer}

\mode<presentation>
{
  \usetheme{Berkeley}
  \usecolortheme{crane}
}

\usepackage[utf8]{inputenc}
\usepackage{graphicx}
\usepackage{polski}
\usepackage{minted}

% For pygmentize
\usepackage{fancyvrb}
\usepackage{color}

%% \input{styles}
\title{Administracja serwera PostgreSQL}

\author[]{Szymon Pyżalski}

\date {}
\logo {\includegraphics[width=1.5cm]{../../vavatech_logo_small.png}}

\begin{document}

\begin{frame}
  \titlepage 
\end{frame}


\section{Instalacja postgres}
\insertsectionhead
\begin{frame}{Wymagania (prawie) obowiązkowe}
    \begin{description}
            \pause
        \item[readline] dla wygodniejszego \texttt{psql}
            \pause
        \item[libz] dla zrzutów bazy
    \end{description}
\end{frame}

\begin{frame}{Wymagania nieobowiązkowe}
    \begin{itemize}
            \pause
        \item Języki programowania (Python, Tcl, Perl)
            \pause
        \item Narzędzia autoryzacji (Kerberos, LDAP)
            \pause
        \item i18n (Gettext)
            \pause
        \item Integracje (Systemd)
    \end{itemize}
\end{frame}

\begin{frame}[fragile]{Utworzenie klastra}
    \begin{minted}[fontsize=\tiny]{shell-session}
# export PGDATA=/var/lib/postgresql/10.0/data
# adduser --disabled-password postgres
# mkdir -p $PGDATA
# chmod postgres:postgres $PGDATA
# su postgres
$ export PGDATA=/var/lib/postgresql/10.0/data
$ initdb -D $PGDATA
    \end{minted}
\end{frame}

\begin{frame}{Użytkownik postgres}
    \begin{enumerate}
            \pause
        \item Właściciel całego klastra
            \pause
        \item Nie powinien być używany do czegokolwiek innego
            \pause
        \item Umożliwia logowanie metodą \emph{peer}
    \end{enumerate}
\end{frame}

\begin{frame}[fragile]{Uruchomienie serwera niezdemonizowanego}
    \begin{minted}[fontsize=\tiny]{shell-session}
$ sudo su postgres
$ postgres -D /var/lib/postgresql/10.0/data postgres
    \end{minted}
\end{frame}

\begin{frame}[fragile]{Uruchomienie serwera zdemonizowanego}
    \begin{minted}[fontsize=\tiny]{shell-session}
$ export PGDATA=/var/lib/postgresql/10.0/datapostgres -D /var/lib/postgresql/10.0/data
$ sudo -Eu postgres pg_ctl start
    \end{minted}
\end{frame}

\begin{frame}{Możliwości łączenia się}
    \begin{enumerate}
            \pause
        \item Serwer domyślnie słucha tylko na localhost i tylko stamtąd
            przyjmuje połączenia
            \pause
        \item Aby serwer słuchał na innych adresach używamy parametru
            \texttt{listen\_addresses}
            \pause
        \item Aby serwer przyjmował połączenia spoza localhost używamy pliku
            \texttt{pg\_hba.conf}
    \end{enumerate}
\end{frame}

\begin{frame}{Typy połączeń}
    \begin{description}
            \pause
        \item[local] Połączenie przez socket unixowy
            \pause
        \item[host] Połączenie sieciowe (szyfrowane bądź nie)
            \pause
        \item[hostssl] Połączenie sieciowe (szyfrowane)
            \pause
        \item[hostnossl] Połączenie sieciowe (nieszyfrowane)
    \end{description}
\end{frame}

\begin{frame}{Określenie bazy danych}
    \begin{description}
            \pause
        \item[nazwa] Baza o danej nazwie
            \pause
        \item[all] Wszystkie bazy danych
            \pause
        \item[sameuser] Baza danych o tej samej nazwie co użytkownik
            \pause
        \item[samerole] Baza danych o tej samej nazwie, co jedna z ról użytkownika
            \pause
        \item[@nazwapliku] Bazy danych wymienione w pliku \texttt{nazwapliku}
    \end{description}
\end{frame}

\begin{frame}{Określenie użytkownika}
\begin{description}
    \item[all] Wszyscy użytkownicy
    \item[nazwa] Użytkownik o danej nazwie
    \item[+nazwa] Użytkownik należący do danej roli
    \item[@nazwa pliku] Użytkownik wymieniony w pliku
\end{description}
\end{frame}

\begin{frame}{Adres}
    \begin{itemize}
            \pause
        \item Adres IP
            \pause
        \item Nazwa domeny
            \pause
        \item Określenie \texttt{samehost} lub \texttt{samenet}
    \end{itemize}
\end{frame}

\begin{frame}{Metoda uwierzytelniania}
    \begin{description}
            \pause
    \item[trust] Umożliwia połącznie jako dowolny użytkownik z kolumny USER bez
        uwierzytelniania
            \pause
    \item[peer] Umożliwia połączenie użytkownika, jeśli ma on na lokalnej
        maszynie tę samą nazwę, co użytkownik bazy. Dostępne tylko dla połączeń
        przez socketa.
            \pause
    \item[password] Uwierzytelnianie przez niezaszyfrowane hasło.
        \pause
    \item[scram-sha-256,md5] Uwierzytelnianie przez szyfrowane hasło.
        \pause
    \item[gss] Użycie Kerberos do uwierzytelniania.
        \pause
    \item[reject] Odrzuć połączenie (umożliwia np. tworzenie czarnej listy
        hostów)
    \end{description}
\end{frame}


\section{Zarządzanie użytkownikami}
\insertsectionhead

\begin{frame}{Rola}
    \begin{itemize}
            \pause
        \item W PostgreSQL koncepcje użytkownika i grupy zunifikowane są do
            pojęcia roli.
            \pause
        \item Role mające uprawnienie \texttt{LOGIN} odpowiadają użytkownikom.
            \pause
        \item Role mogą być przypisywane do innych ról, jak do grup i
            dziedziczyć ich uprawnienia.
    \end{itemize}
\end{frame}

\begin{frame}[fragile]{Tworzenie ról}
    \begin{minted}[fontsize=\tiny]{postgresql}
CREATE USER alicja WITH SUPERUSER PASSWORD 'bardzotajne';
CREATE ROLE alicja WITH LOGIN SUPERUSER PASSWORD 'bardzotajne';
    \end{minted}
\end{frame}

\begin{frame}{Globalne atrybuty roli}
    \begin{description}
        \item[SUPERUSER] Rola może obejść wszystkie ograniczenia bazy danych.
        \item[CREATEDB] Rola może tworzyć bazy danych.
        \item[CREATEROLE] Rola może tworzyć nowe role.
        \item[REPLICATION] Rola może być używana przy replikacji.
    \end{description}
\end{frame}

\begin{frame}[fragile]{Przypisywanie do ról}
    \begin{minted}[fontsize=\tiny]{postgresql}
CREATE USER "alicja" WITH PASSWORD 'bardzotajne';
CREATE ROLE "admins" WITH CREATEROLE NOINHERIT;
CREATE ROLE "creators" WITH CREATEDB;
GRANT ROLE "admins" TO "alicja";
GRANT ROLE "creators" TO "alicja";
    \end{minted}
\end{frame}

\section{Bazy danych}
\insertsectionhead
\begin{frame}[fragile]{Przykład tworzenia bazy danych}
    \begin{minted}[fontsize=\tiny]{postgresql}
CREATE COLLATION "pl_PL.UTF-8" (LOCALE='pl_PL.utf8');
CREATE DATABASE "baza" WITH OWNER="alicja" ENCODING="UTF-8"
LC_COLLATE="pl_PL.UTF-8" LC_CTYPE="pl_PL.UTF-8" TEMPLATE="template0";
    \end{minted}
\end{frame}

\begin{frame}[fragile]{Przykład tworzenia tabeli}
    \begin{minted}[fontsize=\tiny]{postgresql}
CREATE TABLE people(
    id serial PRIMARY KEY,
    name character varying(255) COLLATE 'pl_PL.UTF-8'
);
    \end{minted}
\end{frame}

\begin{frame}[fragile]{Przykład wykorzystania schemy}
    \begin{minted}[fontsize=\tiny]{postgresql}
CREATE SCHEMA internal;
CREATE TABLE users(id serial PRIMARY KEY, name character varying(128));
CREATE TABLE internal.logs(id serial PRIMARY KEY, content text);
    \end{minted}
\end{frame}

\begin{frame}[fragile]{Przykład wykorzystania tablespace}
    \begin{minted}[fontsize=\tiny]{postgresql}
CREATE TABLESPACE critical LOCATION '/mnt/sdc/data' -- dysk SSD
CREATE TABLESPACE archive LOCATION '/mnt/sdb/data' -- dysk HDD
CREATE TABLE users(id serial PRIMARY KEY, name character varying(128))
    TABLESPACE critical;
CREATE TABLE logs(id serial PRIMARY KEY, content TEXT) TABLESPACE archive;
    \end{minted}
\end{frame}

\begin{frame}[fragile]{Partycjonowanie tabel – cz. 1}
    \begin{minted}[fontsize=\tiny]{postgresql}
        CREATE TABLE actions(
            id serial PRIMARY KEY,
            content character varying(128),
            date_performed timestamp,
        ) PARTITION BY RANGE(date_performed);

        CREATE TABLE actions_archive PARTITION OF actions
            FOR VALUES FROM (MINVALUE) TO ('2017-12-31')
            TABLESPACE archive;
        CREATE TABLE actions_current PARTITION OF actions
            FOR VALUES FROM ('2018-01-01') TO (MAXVALUE)
            TABLESPACE critical;
    \end{minted}
\end{frame}

\begin{frame}[fragile]{Partycjonowanie tabel – cz. 1}
    \begin{minted}[fontsize=\tiny]{postgresql}
        CREATE TABLE people(
            id timestamp PRIMARY KEY,
            name character varying(128),
        ) PARTITION BY HASH(id);

        CREATE TABLE people_0 PARTITION OF people
            FOR VALUES WITH (MODULUS 2, REMAINDER 0)
            TABLESPACE disk_0;
        CREATE TABLE  PARTITION OF people
            FOR VALUES FROM (MODULUS 2, REMAINDER 1)
            TABLESPACE disk_1;
    \end{minted}
\end{frame}
\section{Uprawnienia}
\insertsectionhead

\begin{frame}{Rodzaje uprawnień}
\begin{description}
        \pause
    \item[SELECT] Użycie zapytań \texttt{SELECT} na danej tabeli.
        Jest też potrzebne przy zapytaniach \texttt{DELETE} oraz
        \texttt{UPDATE} jeśli posiadają one jakiekolwiek warunki.
        \pause
    \item[UPDATE, DELETE, INSERT] Użycie zapytań o tych nazwach na
        tabeli.
        \pause
    \item[REFERENCES] Tworzenie kluczy obcych między danymi kolumnami
        lub kolumnami w danej tabeli.
        \pause
    \item[TRIGGER] Tworzenie wyzwalaczy.
        \pause
    \item[CREATE] Tworzenie schemy w danej bazie danych lub tabel w
        danej schemie.
\end{description}
\end{frame}

\begin{frame}{Rodzaje uprawnień}
\begin{description}
        \pause
    \item[CONNECT] Łączenie się z daną bazą danych (duplikuje funkcjonalność
        pliku \texttt{pg\_hba.conf}
        \pause
    \item[TEMP] Tworzenie tabel tymczasowych
        \pause
    \item[EXECUTE] Użycie danej funkcji
        \pause
    \item[USAGE] Pisanie procedur w danym języku
\end{description}
\end{frame}

\begin{frame}[fragile]{Nadawanie uprawnień, przykłady}
    \begin{minted}[fontsize=\tiny]{postgresql}
GRANT INSERT ON logs TO alice;
GRANT INSERT ON logs TO alice;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA internal TO alice;
ALTER DEFAULT PRIVILEGES IN SCHEMA internal
GRANT SELECT ON TABLES TO alice;
    \end{minted}
\end{frame}

\section{Spójnosć}
\insertsectionhead
\begin{frame}{Transakcje}
    \begin{itemize}
            \pause
        \item Transakcja grupuje kilka operacji na bazie danych
            \pause
        \item Transakcja może w całości się powieść, lub w całości nie powieść
            \pause
        \item Transakcję możemy w dowolnym momencie wycofać
            (\texttt{ROLLBACK}))
    \end{itemize}
\end{frame}

\begin{frame}[fragile]{Transakcja – przykład}
    \begin{minted}[fontsize=\tiny]{shell-session}
BEGIN;
UPDATE accounts SET money = money - 100 WHERE username = 'alice';
UPDATE accounts SET money = money + 100 WHERE username = 'bob';
END;
    \end{minted}
\end{frame}

\begin{frame}{Zjawiska niepożądane}
\begin{description}
        \pause
    \item[Brudny odczyt] odczytywane są dane zapisane w transakcji, która nie
        została zacommitowana. Sytuacja ta nigdy nie zdarza się w PostgreSQL.
        \pause
    \item[Niepowtarzalny odczyt] kilkakrotny odczyt tych samych rzędów w ramach
        transakcji daje różne dane
        \pause
    \item[Odczyt fantomowy] kilkakrotne powtórzenie tego samego filtrowania
        daje różne rzędy
        \pause
    \item[Anomalie serializacyjne] po wykonaniu obu transakcji osiągamy stan,
        który nie mógłby być uzyskany przez wykonanie tych transakcji jedna po
        drugiej w dowolnej kolejności
\end{description}
\end{frame}
\begin{frame}{Stopnie izolacji}
\begin{description}
        \pause
    \item[READ COMMITTED] w tym trybie nie widzimy danych, które nie zostały
        zacommitowane. Możliwe są jednak zmiany danych w czasie transakcji.
        \pause
    \item[REPEATABLE READ] w tym trybie dostępny jest dla nas stały stan bazy
        danych. Zmiany wykonane przez inne transakcje nie mają wpływu na nasze
        wyszukiwania i na dane, które uzyskujemy.
        \pause
    \item[SERIALIZABLE] w tym trybie wszystkie transakcje sumaryczny efekt
        działania wszystkich transakcji będzie taki sam, jak gdyby transakcje
        te były wykonane jedna po drugiej. Jeśli to niemożliwe, zostanie
        wyświetlony błąd i transakcja będzie musiała być cofnięta.
\end{description}
\end{frame}
\begin{frame}{Więzy spójności}
    \begin{description}
        \pause
    \item[NOT NULL] Wartość nie może być null.
        \pause
    \item[UNIQUE] Wartość unikatowa (o ile nie NULL), automatyczny indeks
        \pause
    \item[PRIMARY KEY] Oba powyższe
        \pause
    \item[REFERENCES] Klucz obcy
        \pause
    \item[CHECK] Sprawdzenie wartości
    \end{description}
\end{frame}

\begin{frame}[fragile]{Przykład klucza obcego}
\begin{minted}[fontsize=\tiny]{postgresql}
CREATE TABLE people (
    id serial PRIMARY KEY,
    first_name character varying(255) NOT NULL
);
CREATE TABLE articles (
    id serial PRIMARY KEY,
    author_id REFERENCES people(id) NULL ON DELETE SET NULL,
    content TEXT NOT NULL
);
CREATE TABLE comments (
    id serial PRIMARY KEY,
    author_id REFERENCES people NOT NULL ON DELETE CASCADE,
    content TEXT NOT NULL
);
\end{minted}
\end{frame}
\begin{frame}{Blokady}
    \begin{itemize}
            \pause
        \item Blokady pozyskiwane są dla rzędów i tabel automatycznie przez
            niektóre operacje
            \pause
        \item Możemy ręcznie pozyskać blokadę przy pomocy polecenia
            \texttt{LOCK}
            \pause
        \item Blokady definiowane są przez to, z jakimi innymi blokadami
            konfliktują
            \pause
        \item Deadlock może się pojawić, gdy pozyskujemy blokady w
            niekonsekwentnej kolejności
    \end{itemize}
\end{frame}

\section{Czynności utrzymaniowe}
\insertsectionhead

\begin{frame}{ANALYZE i VACUUM}
    \begin{description}
            \pause
        \item[ANALYZE] Uaktualnia statystyki tabeli
            \pause
        \item[VACUUM] Usuwa martwe rzędy
            \pause
        \item[VACUUM FULL] Usuwa martwe rzędy i pozwala na ponowne
            wykorzystanie miejsca przez system
        \item[autovacuum] Demon wykonujący automatycznie operacje
            \texttt{ANALYZE} i \texttt{VACUUM}
    \end{description}
\end{frame}

\begin{frame}[fragile]{Kopie zapasowe przy użyciu pg\_dump}
    \begin{minted}[fontsize=\tiny]{shell-session}
$ pg_dump -U alicja moja_baza > zrzut.sql
$ psql -U alicja < zrzut.sql
$ pg_dump -U alicja moja_baza -Fc > zrzut.dump
$ pg_restore -U alicja -j4 -t mojatablica zrzut.dump
    \end{minted}
\end{frame}

\begin{frame}{Pliki WAL}
    \begin{itemize}
            \pause
        \item Pliki WAL wykorzystywane są do utrzymania spójności bazy danych
            \pause
        \item Normalnie są usuwane po wykorzystaniu
            \pause
        \item Mogą być wykorzystywane do inkrementalnych kopii zapasowych oraz
            do replikacji
    \end{itemize}
\end{frame}


\begin{frame}{Inkrementalne kopie zapasowe}
    \begin{itemize}
            \pause
        \item Konfigurujemy bazę danych, by zachowywała pliki WAL
            \pause
        \item Tworzymy zrzut plików bazy przy użyciu \texttt{pg\_basebackup}
            \pause
        \item Zrzut plików zawiera informację o tym, które pliki WAL muszą być
            zachowane
            \pause
    \end{itemize}
\end{frame}

\section{HA}
\insertsectionhead

\begin{frame}{WAL shipping}
    \begin{itemize}
            \pause
        \item Podobny mechanizm jak przy odzyskiwaniu danych
            \pause
        \item Hot lub warm standby
            \pause
        \item Jeden master
    \end{itemize}
\end{frame}

\begin{frame}{Replikacja w oparciu o middleware}
    \begin{itemize}
            \pause
        \item Nie skaluje operacji modyfikujących bazę danych
            \pause
        \item Proste rozwiązanie bez konfliktów
            \pause
        \item Jeden demon odpowiedzialny za load balancing i za replikację
            danych
    \end{itemize}
\end{frame}

\begin{frame}{Replikacja logiczna}
    \begin{itemize}
            \pause
        \item Więcej danych w plikach WAL
            \pause
        \item Możliwe kilka serwerów master
            \pause
        \item Możliwe konflikty i konieczność ich rozwiązywania
    \end{itemize}
\end{frame}
\end{document}
