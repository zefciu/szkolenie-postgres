\documentclass{beamer}

\mode<presentation>
{
  \usetheme{Berkeley}
  \usecolortheme{crane}
}

\usepackage[utf8]{inputenc}
\usepackage{graphicx}
\usepackage{polski}
\usepackage{minted}

% For pygmentize
\usepackage{fancyvrb}
\usepackage{color}

%% \input{styles}
\title{Programowanie baz PostgreSQL}

\date {}
\logo {\includegraphics[width=1.5cm]{../../vavatech_logo_small.png}}

\begin{document}

\begin{frame}
  \titlepage 
\end{frame}

\begin{frame}{O języku}
    \begin{itemize}
        \pause
        \item Proceduralne rozszerzenie deklaratywnego języka SQL
        \pause
        \item Składnia podobna do SQL – łatwa integracja zapytań SQL
        \pause
        \item Język bezpieczny
    \end{itemize}
\end{frame}

\begin{frame}[fragile]{Przykład funkcji}
\begin{minted}[fontsize=\tiny]{postgresql}
    CREATE OR REPLACE FUNCTION active_num()
    RETURNS integer AS $$
    DECLARE
        total integer;
    BEGIN
        SELECT count(id) into total FROM people WHERE deactivate_ts > now();
        RETURN total;
    END;
    $$ LANGUAGE plpgsql;
\end{minted}
\end{frame}

\begin{frame}[fragile]{Deklaracje zmiennych}
    \begin{minted}[fontsize=\tiny]{postgresql}
    DECLARE
        amount integer;
        name character varying(128);
        arg anyelement;
        name users.username%TYPE;
        result users%ROWTYPE;
        some_record RECORD;
\end{minted}
\end{frame}

\begin{frame}[fragile]{Konwersja typów}
    \begin{minted}[fontsize=\tiny]{postgresql}
    DECLARE
        'Lorem ipsum'::character varying;
        1::double precision;
        'integer'::regtype;
\end{minted}
\end{frame}

\begin{frame}[fragile]{Przypisywanie wartości do zmiennych}
\begin{minted}[fontsize=\tiny]{postgresql}
    SELECT subject, content INTO note_subject, note_content
        FROM notes WHERE id=note_id;
    SELECT * INTO rec FROM notest WHERE id=note_id;
    name := 'admin';
\end{minted}
\end{frame}

\section{Instrukcje sterujące}

\begin{frame}[fragile]{IF}
\begin{minted}{postgresql}
    IF VALUE > 0 THEN
        result := 'dodatnia';
    ELSIF VALUE == 0 THEN
        result := 'zero';
    ELSE
        result := 'ujemna';
    END IF;
\end{minted}
\end{frame}

\begin{frame}[fragile]{CASE}
\begin{minted}{postgresql}
    CASE user.type
    WHEN 'admin', 'manager' THEN
        PERFORM insert_value();
    WHEN 'banned' THEN
        RAISE EXCEPTION 'User % is banned', user;
    ELSE
        PERFORM insert_value_ifpossible()
    END CASE;
\end{minted}
\end{frame}

\begin{frame}[fragile]{CASE}
\begin{minted}{postgresql}
    CASE
        WHEN value > 0 THEN
            result := 'dodatnia';
        WHEN value == 0 THEN
            result := 'zero';
        ELSE
            result := 'ujemna';
    END CASE;
\end{minted}
\end{frame}

\begin{frame}[fragile]{CASE}
\begin{minted}{postgresql}
    WHILE amount > 0 LOOP
        decrease_value(amount);
    END LOOP;
\end{minted}
\end{frame}

\begin{frame}[fragile]{FOR}
\begin{minted}[fontsize=\tiny]{postgresql}
    FOR i IN 1..10 LOOP
        INSERT INTO vals(number) VALUES (i);
    END LOOP;

    FOR rec IN SELECT * FROM people LOOP
        PERFORM handle_user(rec);
    END LOOP;
\end{minted}
\end{frame}


\begin{frame}[fragile]{Zgłaszanie komunikatów i wyjątków}
\begin{minted}[fontsize=\tiny]{postgresql}
    RAISE DEBUG 'Calling the perform_operation function';
    RAISE NOTICE 'User didn''t exist. Creating' USING TABLE='users';
    RAISE EXCEPTION 'User is banned!'
    RAISE division_by_zero USING MESSAGE 'Cannot use zero as number of users';
\end{minted}
\end{frame}

\begin{frame}[fragile]{Przechwytywanie wyjątków}
\begin{minted}[fontsize=\tiny]{postgresql}
    CREATE TABLE users(
        id serial PRIMARY KEY,
        name character varying(128) UNIQUE,
        age integer
    );
    CREATE OR REPLACE FUNCTION
        create_or_update_user(user_name character varying, user_age integer)
        RETURNS void AS $$
            BEGIN
                INSERT INTO users(name, age) VALUES (user_name, user_age);
            EXCEPTION WHEN unique_violation THEN
                RAISE NOTICE 'User already exists, updating';
                UPDATE users SET age=user_age WHERE name=user_name;
            END

    $$ LANGUAGE plpgsql;
\end{minted}
\end{frame}

\begin{frame}[fragile]{Security definer}
    \begin{itemize}
            \pause
        \item Dodanie do funkcji słów \texttt{SECURITY DEFINER} powoduje, że
            funkcja wywołuje się z uprawnieniami użytkownika, który ją napisał
            \pause
    \item \texttt{current\_user} również wskazuje na tego użytkownika
            \pause
    \item Aby pobrać rzeczywistego użytkownika używamy \texttt{session\_user}
    \end{itemize}
\end{frame}

\section{Komunikacja z bazą danych}

\begin{frame}[fragile]{Dynamiczne wywoływanie}
\begin{minted}[fontsize=\tiny]{postgresql}
    EXECUTE format(
        'SELECT subject, content FROM %I WHERE id=$1;'
        tabname
    )
    INTO article_subject, article_content
    USING article_id
    ;
\end{minted}
\end{frame}

\begin{frame}[fragile]{Deklarowanie kursorów}
\begin{minted}[fontsize=\tiny]{postgresql}
    DECLARE
        generic_cursor refcursor;
        user_cursor CURSOR FOR SELECT * FROM users;
        article_by_date_cursor CURSOR (article_created date) FOR SELECT * FROM articles
            WHERE created = article_created;
\end{minted}
\end{frame}

\begin{frame}[fragile]{Otwieranie kursorów}
\begin{minted}[fontsize=\tiny]{postgresql}
    OPEN generic_cursor FOR SELECT * FROM logs WHERE type='important';
    OPEN user_cursor;
    OPEN article_cursor(article_created := '2018-12-01');
\end{minted}
\end{frame}

\begin{frame}[fragile]{Wyzwalacze}
\begin{minted}[fontsize=\tiny]{postgresql}
    CREATE TABLE posts(
        id serial PRIMARY KEY,        
        content text,
        protected boolean
    );

	CREATE OR REPLACE FUNCTION before_delete_post() RETURNS trigger AS $$
	BEGIN
		IF OLD.protected THEN
			RAISE NOTICE 'Post is protected from deletion';
			RETURN NULL;
		ELSE
			RETURN OLD;
		END IF;
	END;
	$$ LANGUAGE plpgsql;

	CREATE TRIGGER tbeforedelete
		BEFORE DELETE ON posts FOR EACH ROW
		EXECUTE PROCEDURE before_delete_post();
\end{minted}
\end{frame}
\end{document}
