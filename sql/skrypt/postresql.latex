\documentclass[openany,twoside]{book}
\usepackage{layout}
\usepackage[utf8]{inputenc}
\usepackage{polski}
\usepackage{minted}
\usepackage{ccicons}
\usepackage{hyperref}
\usepackage{lmodern}
\usepackage{upquote}
\begin{document}
\title{Administracja bazami danych PostgreSQL}
\author{Szymon Pyżalski}

\maketitle

 \vspace*{\fill}
 Niniejszy skrypt dostępny jest na licencji\\
 Creative Commons  Uznanie autorstwa -- Na tych samych warunkach 4.0\\
 Pewne prawa zastrzeżone.\\
 \url{https://creativecommons.org/licenses/by-sa/4.0/legalcode.pl}\\
 \ccbysa


\chapter{Wstęp do SQL i PostgreSQL}

\section{Omówienie pojęć}
PostgreSQL jest relacyjnym systemem bazy danych. Oznacza to, że pozwala on
zarządzać zbudowanymi według relacyjnego modelu zbiorami danych – 
pozyskiwać z nich informacje oraz edytować je.

Relacyjny model danych opiera się o koncepcję tabeli zwanej również relacją.
Tabela taka zawiera rzędy (krotki). Zestaw kolumn jest dla danej tabeli
zdefiniowany – nazywany jest schematem danej tabeli.

Jeśli chcemy w relacyjnej bazie danych przechowywać bardziej złożone struktury
niż płaska tabela, musimy je odpowiednio w tym celu przekształcić. Relacyjne
bazy danych oferują nam w tym celu narzędzia takie jak klucze obce i złączenia.

PostgreSQL jest oprogramowaniem Open Source. Każdy może uzyskać dostęp do kodu
źródłowego i edytować go.

\section{Łączenie się z bazą danych}

\subsection{psql}

Podstawowym narzędziem do łączenia się z bazą danych jest program
\texttt{psql}. Jeśli serwer bazy uruchomiony jest na urządzeniu, z którego
korzystamy i użytkownik oraz baza danych nazywają się tak samo, jak użytkownik
systemu operacyjnego, możemy połączyć się poleceniem:

\begin{minted}{shell-session}
    $ psql
\end{minted}

W innych przypadkach używamy argumentów:

\begin{minted}{shell-session}
    $ psql -U alicja -h db.example.com our_base
\end{minted}

Powyższe komenda połączy nas z bazą danych \texttt{our\_base} na serwerze
\texttt{db.example.com} jako użytkownika \texttt{alicja}.

Narzędzie psql pozwala nam na bezpośrednie wprowadzanie zapytań SQL oferując
takie ułatwienia jak uzupełnianie składni (tabulator), czy możliwość wyboru
polecenia z historii (strzałka w górę). Ponadto oferuje nam zestaw poleceń
spoza SQL zaczynających się od znaku \emph{backslash}. Polecenia te umożliwiają
nam łatwe odczytanie informacji o bazie danych. Np. \texttt{\\dt} wyświetla
wszystkie tablice, a \texttt{\\d tablename} wyświetla nam opis danej tabeli. 
Pełny opis poleceń psql otrzymujemy przy pomocy polecenia \texttt{\?}.

\subsection{pgadmin}

Narzędzie pgadmin pozwala nam na graficzny dostęp do bazy danych. Prezentuje
ono bazę w formie drzewa pozwalając je przeglądać oraz oferuje graficzną
prezentację wyników wyszukiwań. Obecną wersją aplikacji pgadmin jest pgadmin4,
który dostępny jest jako aplikacja przeglądarkowa, albo w wersji desktopowej.
Poprzednia wersja – pgadmin3 dostępna była wyłącznie w formie desktopowej.

\subsection{dostęp programistyczny}

Aby skorzystać z bazy danych z poziomu języka programowania należy skorzystać z
odpowiedniej biblioteki. Np. w języku Python możemy użyć biblioteki psycopg2.

\begin{minted}{pycon}
    >>> from psycopg2 import connect
    >>> connection = connect('dbname=zefciu user=zefciu')
    >>> cur = connection.cursor()
    >>> cur.execute('SELECT * FROM notes;')
    >>> cur.fetchall()
    [
        ('Lorem ipsum', 'alicja', 1),
        ('Dolor sit amet', 'bob', 2),
        ('Litwo ojczyzno moja', 'charlie', 3)
    ]
\end{minted}

\section{Podstawowe polecenia SQL}

Aby szybko rozpocząć pracę z bazą SQL warto nauczyć się poleceń służących do
odczytu, dodawania, edycji i usuwania rzędów tabel.

\begin{minted}{postgresql}
    SELECT id, username FROM users;
\end{minted}

Odczyta wartości kolumn \texttt{id} i \texttt{username} dla całej tabeli
\texttt{users}.

\begin{minted}{postgresql}
    INSERT INTO users(username, usertype) VALUES ('Alicja', 'admin');
\end{minted}

Doda do tabeli \texttt{users} rząd zawierający dla kolumn \texttt{username} i
\texttt{usertype} wartości odpowiednio „Alicja” i „admin”.


\begin{minted}{postgresql}
    UPDATE users SET usertype='superuser' WHERE username = 'Alicja';
\end{minted}

Zmieni wartość w kolumnie \texttt{usertype} na „superuser” dla użytkownika lub
wszystkich użytkowników o \texttt{username} równym „Alicja”.


\begin{minted}{postgresql}
    DELETE FROM users WHERE username = 'Alicja';
\end{minted}

Usunie z tabeli rząd (rzędy) o wartości \texttt{username} równej „Alicja”.

\chapter{Typy danych w PostgreSQL}

PostgreSQL oferuje nam bardzo dużo wbudowanych typów danych 

\section{Proste typy danych}

Najpopularniejszymi prostymi typami danych są:
\begin{description}
    \item[integer] Czterobajtowa liczba całkowita.
    \item[bigint] Ośmiobajtowa liczba całkowita.
    \item[double precision] Liczba zmiennoprzecinkowa o podwójnej precyzji
    \item[decimal] Ułamek dziesiętny
    \item[serial] Liczba całkowita z autoinkrementacją
    \item[character varying] Łańcuch znaków o zmiennej, limitowanej długości
    \item[text] Łańcuch znaków o nielimitowanej długości
    \item[timestamp] Data i godzina
    \item[date] Data
    \item[time] Godzina
    \item[interval] Odstęp czasowy
    \item[boolean] Wartość logiczna (\texttt{TRUE} / \texttt{FALSE})
\end{description}

\section{Funkcje i operatory}

Wbudowane typy oferują nam możliwość używania operatorów oraz funkcji.
Przykładowe funkcje operujące na wartościach numerycznych to:
    \begin{description}
        \item[abs] Wartość absolutna liczby
        \item[ceil] Zaokrąglenie w górę
        \item[degrees] Konwersja z radianów na stopnie
        \item[floor] Zaokrąglenie w dół
        \item[mod] Modulo (reszta z dzielenia)
        \item[round] Zaokrąglenie do najbliższej liczby całkowitej
        \item[sin] Sinus (argument w radianach)
    \end{description}


