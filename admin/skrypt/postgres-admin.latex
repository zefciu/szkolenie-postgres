\documentclass[openany,twoside]{book}
\usepackage{layout}
\usepackage[utf8]{inputenc}
\usepackage{polski}
\usepackage{minted}
\usepackage{ccicons}
\usepackage{hyperref}
\usepackage{lmodern}
\usepackage{upquote}
\begin{document}
\title{Administracja bazami danych PostgreSQL}
\author{Szymon Pyżalski}

\maketitle

 \vspace*{\fill}
 Niniejszy skrypt dostępny jest na licencji\\
 Creative Commons  Uznanie autorstwa -- Na tych samych warunkach 4.0\\
 Pewne prawa zastrzeżone.\\
 \url{https://creativecommons.org/licenses/by-sa/4.0/legalcode.pl}\\
 \ccbysa


\chapter{Instalacja bazy danych}

\section{Instalacja z paczek}

Praktycznie wszystkie dystrybucje Linuxa posiadają paczki, które umożliwiają
instalację RDBS PostgreSQL. Dystrybucja podzielona jest zwykle na następujące
paczki (nazwy według Ubuntu):

\begin{enumerate}
    \item Paczka serwerowa zawierająca usługę PostgreSQL
        (\texttt{postgresql-10})
    \item Paczka kliencka zawierająca narzędzie \texttt{psql}
        (texttt{postgresql-client-10})
    \item Paczki developerskie potrzebne przy instalacji ze źródeł narzędzi
        backendowych (\texttt{postgresql-server-dev-10}) oraz frontendowych
        (\texttt{libpq-dev})
    \item Wsparcie dla języków programowania
        (np.  \texttt{postgresql-plpython-10})
    \item Rozszerzenia (np. \texttt{postgis})
\end{enumerate}

Paczki te oprócz instalacji RDBS przeprowadzają też jego podstawową
konfigurację. Konfigurują również menedżera usług, co sprawia, że po instalacji
odpowiedniej paczki otrzymujemy działającą usługę PostgreSQL.

\section{Instalacja ze źródeł}

PostgreSQL nie posiada wielu zależności i w zasadzie może być skompilowany bez
żadnych bibliotek poza biblioteką standardową C. Nie jest to jednak zalecane.
Do zależności, które są nam potrzebne należą:

\begin{description}
    \item[readline]Umożliwia narzędziu \texttt{psql} stworzenie przyjaznego
        interfejsu tekstowego (historia, podpowiadanie składni). Bardzo
        zalecany.
    \item[zlib]Umożliwia kompresję danych przy zrzutach i odzyskiwaniu baz
        danych. Bardzo zalecany.
    \item[OpenSSL]Umożliwia szyfrowaną łączność z usługą.
    \item[kerberos, openLDAP etc]Jeśli chcemy skonfigurować uwierzytelnianie
        przy pomocy tych usług.
    \item[Python, Tcl etc.]Aby umożliwić pisanie funkcji w tych językach.
\end{description}

Instalacja ze źródeł umożliwia nam precyzyjne określenie, jakie funkcjonalności
mają być dostępne w usłudze. Umożliwia też określenie domyślnej konfiguracji
(która jest jednak łatwa do nadpisania w plikach konfiguracyjnych).

Instalację ze źródeł przeprowadzamy standardowymi poleceniami
\texttt{./configure}, \texttt{make}, \texttt{make install}.

Po instalacji konieczne jest ręczne utworzenie klastra oraz konfiguracja
usługi.

\chapter{Wstępna konfiguracja PostgreSQL}

\section{Utworzenie klastra}

Aby utworzyć klaster na dysku używamy polecenia \texttt{initdb}. Np. 

\begin{minted}{shell-session}
    # export PGDATA=/var/lib/postgresql/10.0/data
    # adduser --disabled-password postgres
    # mkdir -p $PGDATA
    # chmod postgres:postgres $PGDATA
    $ export PGDATA=/var/lib/postgresql/10.0/data
    $ initdb -D PGDATA
\end{minted}

Zaleca się, aby stworzony użytkownik (zalecana nazwa \texttt{postgres}) był
wykorzystywany tylko do tego celu.

\section{Uruchomienie serwera}

Po utworzeniu klastra możemy już uruchomić serwer. Najbardziej niskopoziomowym
sposobem uruchomienia jest wywołanie polecenia \texttt{postgres}

\begin{minted}{shell-session}
    $ sudo su postgres
    $ postgres -D /var/lib/postgresql/10.0/data
\end{minted}

Polecenie to powoduje uruchomienie serwera w wersji niezdemonizowanej, w
\emph{foreground}. Prostym narzędziem do uruchamiania serwera w wersji
zdemonizowanej jest \texttt{pg\_ctl}

\begin{minted}{shell-session}
    $ export PGDATA=/var/lib/postgresql/10.0/datapostgres -D /var/lib/postgresql/10.0/data
    $ sudo -Eu postgres pg_ctl start
\end{minted}

Po wszystkim możemy spróbować połączyć się z serwerem:

\begin{minted}{shell-session}
    $ sudo -u postgres psql
\end{minted}

Właściwym dla serwerów produkcyjnych sposobem uruchamiania serwera jest
zastosowanie menadżera usług. Przykładowa konfiguracja usługi PostgreSQL dla
systemd:

\begin{minted}{ini}
    [Unit]
    Description=PostgreSQL database server

    [Service]
    Type=notify
    User=postgres
    ExecStart=/usr/local/pgsql/bin/postgres -D /usr/local/pgsql/data
    ExecReload=/bin/kill -HUP $MAINPID
    KillMode=mixed
    KillSignal=SIGINT
    TimeoutSec=0

    [Install]
    WantedBy=multi-user.target
\end{minted}

\section{Konfiguracja dostępności}

Domyślnie serwer postgresql nasłuchuje połączeń wyłącznie na
\texttt{localhost}. Aby umożliwić połączenia z zewnątrz należy zmienić dwie
rzeczy. Po pierwsze – w pliku \texttt{postgresql.conf} należy ustawić wartość
\texttt{listen\_addresses}. Wartość ta określa adresy, na których serwer
\emph{nasłuchuje}. Dlatego jeśli chcemy, aby do serwera istniał dostęp z
określonej sieci należy dodać do listy adres I.P. naszej maszyny w tej sieci.
Alternatywnie możemy ustawić wartość tego parametru na \texttt{'*'}. Serwer
będzie wtedy nasłuchiwał na wszystkich adresach.

Drugą sprawą jest edycja pliku \texttt{pg\_hba.conf}. Plik ten jest tabelą
określającą sposoby, w jakie można łączyć się z serwerem. Posiada on pięć
kolumn:

\subsection{TYPE}
\begin{description}
    \item[local] Połączenie przez socket unixowy
    \item[host] Połączenie sieciowe (szyfrowane bądź nie)
    \item[hostssl] Połączenie sieciowe (szyfrowane)
    \item[hostnossl] Połączenie sieciowe (nieszyfrowane)
\end{description}

\subsection{DATABASE}
Kolumna ta zawierać może nazwę bazy danych. Oprócz tego przyjmuje następujące
specjalne nazwy:
\begin{description}
    \item[all] Wszystkie bazy danych
    \item[sameuser] Baza danych o tej samej nazwie co użytkownik
    \item[samerole] Baza danych o tej samej nazwie, co jedna z ról użytkownika
    \item[@nazwapliku] Bazy danych wymienione w pliku \texttt{nazwapliku}
\end{description}

\subsection{USER}
Może zawierać:
\begin{itemize}
    \item Nazwę użytkownika
    \item Nazwę roli, do której należy użytkownik poprzedzoną znakiem \texttt{+},
    \item Nazwę pliku z listą użytkowników poprzedzoną znakiem \texttt{@}
    \item Słowo \texttt{all}
\end{itemize}

\subsection{ADDRESS}

Zawiera nazwę domeny albo adres IP podsieci. Może również zawierać specjalne
nazwy \texttt{samehost} i \texttt{samenet} określające połączenia z tego samego
hosta lub tej samej podsieci.

\subsection{METHOD}

Przykładowymi metodami uwierzytelniania są:

\begin{description}
    \item[trust] Umożliwia połącznie jako dowolny użytkownik z kolumny USER bez
        uwierzytelniania
    \item[peer] Umożliwia połączenie użytkownika, jeśli ma on na lokalnej
        maszynie tę samą nazwę, co użytkownik bazy. Dostępne tylko dla połączeń
        przez socketa.
    \item[password] Uwierzytelnianie przez niezaszyfrowane hasło.
    \item[scram-sha-256,md5] Uwierzytelnianie przez szyfrowane hasło.
    \item[gss] Użycie Kerberos do uwierzytelniania.
    \item[reject] Odrzuć połączenie (umożliwia np. tworzenie czarnej listy
        hostów)
\end{description}

\chapter{Użytkownicy}

\subsection{Tworzenie użytkowników}

PostgreSQL posługuje się pojęciem „roli”. Określenie to może oznaczać zarówno
użytkownika, jak i grupę użytkowników. Użytkownicy to role posiadające
możliwość logowania. Role nie posiadające możliwości logowania mogą być
wykorzystywane jako grupy.

Nową rolę utworzyć można posługując się językiem SQL przy użyciu polecenia
\texttt{CREATE ROLE}/\texttt{CREATE USER} albo z poziomu \emph{shella} przy
pomocy narzędzia \texttt{createuser}

Aby utworzyć użytkownika o nazwie „alicja” z uprawnieniami superużytkownika
logującego się hasłem możemy użyć następujących poleceń SQL:

\begin{minted}{postgresql}
    CREATE USER alicja WITH SUPERUSER PASSWORD 'bardzotajne';
    CREATE ROLE alicja WITH LOGIN SUPERUSER PASSWORD 'bardzotajne';
\end{minted}

lub też polecenia powłoki

\begin{minted}{shell-session}
    createuser alicja --pwprompt --superuser
\end{minted}

Role usuwamy poleceniem \texttt{DROP ROLE}.

\subsection{Uprawnienia globalne}

Role mogą posiadać następujące globalne uprawnienia:

\begin{description}
    \item[SUPERUSER] Rola może obejść wszystkie ograniczenia bazy danych.
    \item[CREATEDB] Rola może tworzyć bazy danych.
    \item[CREATEROLE] Rola może tworzyć nowe role.
    \item[REPLICATION] Rola może być używana przy replikacji (więcej w
        rozdziale o HA.
\end{description}

Te uprawnienia mogą być ustawiane w czasie tworzenia roli lub zmieniane przy
pomocy polecenia \texttt{ALTER ROLE}

\subsection{Przypisywanie użytkowników do ról}

Do przypisania użytkownika do roli służy polecenie \texttt{GRANT} np. po
wykonaniu:

\begin{minted}{postgresql}
    CREATE USER "alicja" WITH PASSWORD 'bardzotajne';
    CREATE ROLE "admins" WITH CREATEROLE NOINHERIT;
    CREATE ROLE "creators" WITH CREATEDB;
    GRANT ROLE "admins" TO "alicja";
    GRANT ROLE "creators" TO "alicja";
\end{minted}

Alicja będzie miała możliwość tworzenia baz danych. Jeśli zaś będzie chciała
utworzyć rolę, będzie musiał ręcznie przełączyć się na rolę „admins”
poleceniem:

\begin{minted}{postgresql}
    SET ROLE "admins";
\end{minted}

Aby odebrać rolę użytkownikowi używamy polecenia \texttt{REVOKE}. Np:

\begin{minted}{postgresql}
    REVOKE "admins" FROM "alicja";
\end{minted}

\chapter{Bazy danych}
\section{Tworzenie baz}
Bazy danych tworzymy poleceniem \texttt{CREATE DATABASE}. Polecenie
\texttt{CREATE DATABASE "baza"} utworzy bazę danych, której właścicielem będzie
użytkownik, który wykonał to polecenie, natomiast pozostałe ustawienia zostaną
skopiowane z szablonu \texttt{template1}. Jeśli te ustawienia nas nie
satysfakcjonują, możemy użyć własnych. Załóżmy, że zależy nam, aby baza danych
prawidłowo pracowała z tekstem w języku polskim, np. stosowała polską kolejność
alfabetyczną. W tym celu musimy upewnić się, że system operacyjny posiada
zainstalowaną \emph{locale} \texttt{pl\_PL.utf8}.
Następnie należy utworzyć na serwerze należy sprawdzić, czy istnieje obiekt
\emph{collation} na serwerze. Wykonujemy w tym celu polecenie narzędzia
\texttt{psql}: \texttt{\\dOS} albo też bezpośrednio wyszukujemy w bazie danych
\texttt{postgres}:


\begin{minted}{postgresql}
    SELECT * FROM pg_collation;
\end{minted}

Jeśli polska lokalizacja jest niedostępna tworzymy ją poleceniem:

\begin{minted}{postgresql}
    CREATE COLLATION "pl_PL.UTF-8" (LOCALE='pl_PL.utf8');
\end{minted}

Teraz możemy już stworzyć bazę danych:

\begin{minted}{postgresql}
    CREATE DATABASE "baza" WITH OWNER="alicja" ENCODING="UTF-8"
    LC_COLLATE="pl_PL.UTF-8" LC_CTYPE="pl_PL.UTF-8" TEMPLATE="template0";
\end{minted}

Użycie \texttt{template0} zamiast domyślnego \texttt{template1} jest wymagane,
jeśli chcemy użyć lokalizacji innej, niż domyślna.

\section{Tworzenie tabel}

Aby utworzyć tabelę w bazie danych używamy polecenia \texttt{CREATE TABLE}. Np.
\begin{minted}{postgresql}
    CREATE TABLE people(
        id serial PRIMARY KEY,
        name character varying(255) COLLATE 'pl_PL.UTF-8'
    );
\end{minted}

Powyższy przykład pokazuje możliwość nadpisania danych językowych bazy danych
dla konkretnych kolumn.


\section{schema i tablespace}

W bazie danych możemy tworzyć dwa rodzaje grupowań tabel: schema i tablespace.

Schema to logiczna przestrzeń nazw umożliwiająca pogrupowanie tabel i wspólne
zarządzanie nimi. Jeśli nie chcemy z nich korzystać, wszystkie tabele będą
umieszczone w schema o nazwie \emph{public}.

\begin{minted}{postgresql}
    CREATE SCHEMA internal;
    CREATE TABLE users(id serial PRIMARY KEY, name character varying(128));
    CREATE TABLE internal.logs(id serial PRIMARY KEY, content text);
\end{minted}

Powyższy kod utworzy schemę o nazwie \texttt{internal} oraz dwie tabele. Jedną w
schemie \texttt{public}, a jedną w \texttt{internal}. Taka konwencja może być
wykorzystana np. aby umożliwić korzystanie z pewnego zbioru tabel tylko
wybranym użytkownikom.

Tablespace to określenie fizycznej lokalizacji, w której mają być przechowywane
określone tabele. Dzięki nim możliwe jest fizyczne partycjonowanie bazy danych.

\begin{minted}{postgresql}
    CREATE TABLESPACE critical LOCATION '/mnt/sdc/data' -- dysk SSD
    CREATE TABLESPACE archive LOCATION '/mnt/sdb/data' -- dysk HDD
    CREATE TABLE users(id serial PRIMARY KEY, name character varying(128))
        TABLESPACE critical;
    CREATE TABLE logs(id serial PRIMARY KEY, content TEXT) TABLESPACE archive;
\end{minted}

Powyższa konfiguracja umieści tabelę użytkowników na dysku SSD, a tabelę logów
na dysku HDD.

\section{Partycjonowanie tabel}

Tabele mogą być dzielone na partycje. Załóżmy, że chcemy dane działań
wykonanych od roku 2018 przechowywać na dysku SSD, a dane wcześniejsze – na
dysku obrotowym. W takim przypadku tworzymy spartycjonowaną tabelę w
następujący sposób:

\begin{minted}{postgresql}
    CREATE TABLE actions(
        id serial PRIMARY KEY,
        content character varying(128),
        date_performed timestamp,
    ) PARTITION BY RANGE(action_ts);

    CREATE TABLE actions_archive PARTITION OF actions
        FOR VALUES FROM (MINVALUE) TO ('2017-12-31')
        TABLESPACE archive;
    CREATE TABLE actions_current PARTITION OF actions
        FOR VALUES FROM ('2018-01-01')
        TABLESPACE critical;
\end{minted}

Innym zastosowaniem partycji może być podzielenie tabeli, która jest zbyt
wielka, by zmieścić się na jednym dysku.

\begin{minted}{postgresql}
    CREATE TABLE people(
        id timestamp PRIMARY KEY,
        name character varying(128),
    ) PARTITION BY HASH(id);

    CREATE TABLE people_0 PARTITION OF people
        FOR VALUES WITH (MODULUS 2, REMAINDER 0)
        TABLESPACE disk_0;
    CREATE TABLE  PARTITION OF people
        FOR VALUES FROM (MODULUS 2, REMAINDER 1)
        TABLESPACE disk_1;
\end{minted}

Powyższy kod spowoduje powstanie spartycjonowanej tabeli, która będzie
przechowywać użytkowników o id parzystym w przestrzeni zdefiniowanej wcześniej
jako \texttt{disk\_0}, a tych o nieparzystym w przestrzeni \texttt{disk\_1}.

\section{Uprawnienia dla baz i tabel}

Domyślnie uprawnienia do dostępu i edycji danych posiadają superużytkownicy
klastra oraz właściciel bazy. Oprócz tego możemy nadawać poszczególnym
rolom następujące uprawnienia:

\begin{description}
    \item[SELECT] Użycie zapytań \texttt{SELECT} na danej tabeli.
        Jest też potrzebne przy zapytaniach \texttt{DELETE} oraz
        \texttt{UPDATE} jeśli posiadają one jakiekolwiek warunki.
    \item[UPDATE, DELETE, INSERT] Użycie zapytań o tych nazwach na
        tabeli.
    \item[REFERENCES] Tworzenie kluczy obcych między danymi kolumnami
        lub kolumnami w danej tabeli.
    \item[TRIGGER] Tworzenie wyzwalaczy.
    \item[CREATE] Tworzenie schemy w danej bazie danych lub tabel w
        danej schemie.
    \item[CONNECT] Łączenie się z daną bazą danych (duplikuje funkcjonalność
        pliku \texttt{pg\_hba.conf}
    \item[TEMP] Tworzenie tabel tymczasowych
    \item[EXECUTE] Użycie danej funkcji
    \item[USAGE] Pisanie procedur w danym języku
\end{description}

Aby nadać uprawnienie używamy polecenia \texttt{GRANT}. Na przykład:

\begin{minted}{postgresql}
    GRANT INSERT ON logs TO alice;
\end{minted}

Nada użytkownikowi \texttt{alice} uprawnienia do wstawiania rekordów do tabeli
\texttt{logs}.

\begin{minted}{postgresql}
    GRANT SELECT ON record\_types TO PUBLIC;
\end{minted}

Nada wszystkim użytkownikom (którzy mogą łączyć się z bazą) możliwość
wykonywania zapytań \texttt{SELECT} na tabeli \texttt{record\_types}.

\begin{minted}{postgresql}
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA internal TO alice;
\end{minted}

Nada użytkownikowi \texttt{alice} wszystkie uprawnienia dla wszystkich tabel w
schemie \texttt{internal}

Aby odebrać uprawnienie używamy polecenia \texttt{REVOKE}

\begin{minted}{postgresql}
    REVOKE ALL PRIVILEGES ON ALL TABLES IN SCHEMA internal FROM alice;
\end{minted}

Możlwe jest też określenie uprawnień dla tabel, które jeszcze nie istnieją:

\begin{minted}{postgresql}
    ALTER DEFAULT PRIVILEGES IN SCHEMA internal
        GRANT SELECT ON TABLES TO alice;
\end{minted}

Powyższe polecenie sprawi, że użytkownik \texttt{alice} będzie miał prawo
wykonywania poleceń \texttt{SELECT} na tabelach utworzonych w przyszłości w
schemie \texttt{internal}.

\chapter{Spójność bazy}

\section{Transakcje}

PostgreSQL jest transakcyjną bazą danych. Oznacza to, że operacje na bazie mogą
być grupowane w transakcje. Transakcja taka może zostać wykonana w całości, lub
też w całości może się nie powieść. Gwarantowane jest natomiast, że nie
zostanie wykonana tylko część operacji w ramach transakcji. Aby wykonać
operacjje w sposób transakcyjny należy ująć zbiór operacji w polecenia
\texttt{BEGIN} oraz \texttt{END}. Np. wykonanie:

\begin{minted}{postgresql}
    BEGIN;
    UPDATE accounts SET money = money - 100 WHERE username = 'alice';
    UPDATE accounts SET money = money + 100 WHERE username = 'bob';
    END;
\end{minted}

spowoduje przeniesienie 100 jednostek z konta Alicji na konto Boba. Jeśli
jednak któraś z tych operacji nie powiodła się (bo np. zabroniliśmy wartości
ujemnych w kolumnie pieniędzy, a Alicja nie posiada wystarczających środków)
żadna z operacji nie zostanie wykonana. Transakcyjność broni nas przed
sytuacją, w której pieniądze mogłyby przepaść w systemie, lub pojawić się
,,znikąd''.

Transakcje możemy w każdej chwili przerwać i cofnąć poleceniem
\texttt{ROLLBACK}

\section{Izolacja trannsakcji}

O ile transakcje zabezpieczają nas przed sytuacją, w której zostatnie wykonane
tylko część operacji, istnieją inne zjawiska, które mogą wystąpić nawet w
systemie transakcyjnym. Są to:

\begin{description}
    \item[Brudny odczyt] odczytywane są dane zapisane w transakcji, która nie
        została zacommitowana. Sytuacja ta nigdy nie zdarza się w PostgreSQL.
    \item[Niepowtarzalny odczyt] kilkakrotny odczyt tych samych rzędów w ramach
        transakcji daje różne dane
    \item[Odczyt fantomowy] kilkakrotne powtórzenie tego samego filtrowania
        daje różne rzędy
    \item[Anomalie serializacyjne] po wykonaniu obu transakcji osiągamy stan,
        który nie mógłby być uzyskany przez wykonanie tych transakcji jedna po
        drugiej w dowolnej kolejności
\end{description}

Aby zapobiegać tym zjawiskom stosujemy izolację transakcji. Możemy podać
stopień izolacji w poleceniu \texttt{BEGIN} lub potem przy pomocy polecenia
\texttt{SET TRANSACTION}.

Np.
\begin{minted}{postgresql}
    BEGIN ISOLATION LEVEL REPEATABLE READ;
\end{minted}

jest równoważne:

\begin{minted}{postgresql}
    BEGIN;
    SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
\end{minted}

Dostępne stopnie izolacji to:

\begin{description}
    \item[READ COMMITTED] w tym trybie nie widzimy danych, które nie zostały
        zacommitowane. Możliwe są jednak zmiany danych w czasie transakcji.
    \item[REPEATABLE READ] w tym trybie dostępny jest dla nas stały stan bazy
        danych. Zmiany wykonane przez inne transakcje nie mają wpływu na nasze
        wyszukiwania i na dane, które uzyskujemy.
    \item[SERIALIZABLE] w tym trybie wszystkie transakcje sumaryczny efekt
        działania wszystkich transakcji będzie taki sam, jak gdyby transakcje
        te były wykonane jedna po drugiej. Jeśli to niemożliwe, zostanie
        wyświetlony błąd i transakcja będzie musiała być cofnięta.
\end{description}

Ze względu na kompatybilność ze standardem SQL dopuszczalna jest też izolacja
\texttt{READ UNCOMMITTED} jednak nie różni się ona w praktyce od \texttt{READ
COMMITTED}. Brudne odczyty nie są w niej możliwe.

\section{Więzy spójności i indeksy}

Dla zapewnienia spójności bazy danych możliwe jest określenie więzów spójności.

\subsection{Unikalność}

Użycie słowa \texttt{UNIQUE} w definicji kolumny powoduje, że dana wartość w
kolumnie nie może się powtarzać. Nie dotyczy to jednak wartości \texttt{NULL}.
Użycie tego słowa powoduje automatyczne utworzenie indeksu. Jeśli chcemy
zapewnić unikalność jakiegoś zbioru kolumn dodajemy słowo \texttt{UNIQUE} pod
definicją kolumn. Np. tabela:

\begin{minted}{postgresql}
    CREATE TABLE people (
        id serial PRIMARY KEY,
        first_name character varying(255) NOT NULL,
        last_name character varying(255) NOT NULL,
        pesel character(11) NULL UNIQUE,
        UNIQUE (first_name, last_name)
    );
\end{minted}

Musi zawierać \texttt{id} (\texttt{PRIMARY KEY} implikuje \texttt{NOT NULL}),
texttt{first\_name} i \texttt{last\_name}. Wartość \texttt{pesel} może być
\texttt{NULL} jednak jeśli wartość jest ustawiona, musi być ona unikalna.
Dodatkowo każda kombinacja imienia i nazwiska musi być unikalna.

\subsection{Klucze obce}

Klucz obcy upewnia nas, że dane w danej kolumnie odpowiadają danym w kolumnie
innej tabeli. Np. dla tabel:

\begin{minted}{postgresql}
    CREATE TABLE people (
        id serial PRIMARY KEY,
        first_name character varying(255) NOT NULL,
    );
    CREATE TABLE articles (
        id serial PRIMARY KEY,
        author_id REFERENCES people NULL ON DELETE SET NULL,
        content TEXT NOT NULL,
    );
    CREATE TABLE comments (
        id serial PRIMARY KEY,
        author_id REFERENCES people NOT NULL ON DELETE CASCADE,
        content TEXT NOT NULL,
    );
\end{minted}

klucze obce upewniają nas, że każdy komentarz będzie posiadał istniejącego
autora. Dodatkowo artykuły mogą nie posiadać autora (wartość \texttt{NULL}).
Jeśli usuniemy osobę, jej komentarze zostaną usunięte z bazy danych, artykuły
zaś będą widniały jako nieposiadające autora.

\subsection{Ograniczenia}

Możliwe jest określenie ręczne ograniczeń. Np. 

\begin{minted}{postgresql}
    CREATE TABLE people (
        id serial PRIMARY KEY,
        username character varying(255) NOT NULL,
        account money CHECK (money > 0),
        credit_limit money,
        credit money,
        CONSTRAINT (credit <= credit_limit)
    );
\end{minted}

\section{Blokady}

Wykonywane na bazie operacje pozyskują blokady na tabelach lub rzędach. Blokady
te mogą uniemożliwiać innym sesjom i transakcjom równoczesne wykonanie
operacjina tym samym obiekcie. Istnieje określona hierarchia blokad, która
wskazuje jakie blokady wchodzą ze sobą w konflikt. Możliwe jest również ręczne
pozyskiwanie blokad dla danej transakcji przy pomocy polecenia \texttt{LOCK}.

Istnienie blokad może powodować problem zwany \emph{deadlock}. Zachodzi on
wtedy, gdy dwie transakcje czekają wzajemnie na zwolnienie blokad, które
nawzajem blokują. Sytuacje takie wykrywane są obecnie przez PostgreSQL i jedna
z transakcji jest przerywana. Aby uniknąć takich sytuacji należy dbać o to, aby
operacje były wykonywane w tej samej kolejności przez wszystkie transakcje.

\chapter{Optymalizacja i utrzymanie bazy}

W czasie użytkowania tabele wymagają czynności związanych z ich utrzymaniem. Są
to przede wszystkim:

\section{ANALYZE}

Komenda ANALYZE wykonuje analizę danych w bazie lub pojedynczej tabeli. Analiza
ta polega na zbieraniu statystyk określający takie informacje, jak liczba
rzędów zawierających \texttt{NULL} dla danej kolumny, liczbę unikalnych
wartości w kolumnie, czy średni rozmiar danych. Statystyki te są wykorzystywane
przez planer do tworzenia planów zapytań, dlatego od ich akturalności zależy
wydajność zapytań do bazy danych. Jeśli chcemy sami ,,podejrzeć'' te wartości
możemy wywołać polecenie \texttt{ANALYZE VERBOSE}.

\section{VACUUM}

Ze względów wydajnościowych PostgreSQL nie usuwa fizycznie rzędów, które
usuwamy z bazy, natomiast edycję rekordów przeprowadza poprzez stworzenie
nowego rzędu i oznaczenie starego jako usuniętego. W ten sposób powstają
,,martwe rzędy'', które musimy regularnie usuwać, aby uniknąć niekontrolowanego
rozrostu bazy danych. Polecenie \texttt{VACUUM} posiada dwie główne wersje:
prostą oraz \texttt{VACUUM FULL}. Prosta forma usuwa martwe rzędy i pozwala na
ponowne wykorzystanie danych w tej samej tabeli. Wersja \texttt{FULL} tworzy
fizycznie nową tabelę i przepisuje starą tabelę do nowego miejsca. Przez to 
forma ta wymaga pełnego zablokowania tabeli oraz istnienia na dysku wolnego
miejsca. Po \texttt{VACUUM FULL} odzyskana przestrzeń zwracana jest do systemu
operacyjnego i może być ponownie wykorzystana przez inne aplikacje. Korzystanie
z \texttt{VACUUM FULL} nie jest koniecznej przy normalnym korzystaniu z bazy
danych, kiedy rozmiar tabeli rośnie lub utrzymuje się na podobnym poziomie.

\section{autovacuum}

Analiza i czyszczenie martwych rzędów może być przeprowadzane automatycznie.
Jest to zalecane i domyślnie włączone w nowszych wersjach PostgreSQL.
Funkcjonalność ta zwana jest \emph{autovacuum}. Demon \emph{autovacuum} działa
w kilku procesach określonych parametrem \texttt{autovacuum\_max\_workers} i
okresowo przeszukuje tabele, dla których liczba usuniętych (dla
\texttt{VACUUM} i \texttt{ANALYZE}) bądź dodanych czy zedytowanych (tylko
\texttt{ANALYZE}) rzędów przekracza odpowiedni próg. Próg ten konfigurujemy
jako pewną wartość minimalną (\texttt{autovacuum\_vacuum\_threshold} lub
\texttt{autovacuum\_analyze\_threshold}) powiększoną o pewien ułamek rozmiaru tabeli
(\texttt{autovacuum\_vacuum\_scale\_factor}, \texttt{autovacuum\_vacuum\_scale\_factor}).


\chapter{Kopie zapasowe}

\section{Użycie pg\_dump}

Najprostszą metodą tworzenia kopii zapasowych bazy danych jest zastosowanie
narzędzia \texttt{pg\_dump}. Narzędzie to generuje zrzut bazy danych. Może mieć
ono postać pliku SQL, który może zostać załadowany do bazy poprzez wczytanie
pliku poleceniem \texttt{psql}.

\begin{minted}{shell-session}
    $ pg_dump -U alicja moja_baza > zrzut.sql
    $ psql -U alicja < zrzut.sql
\end{minted}

Możliwe jest również zapisanie zrzutu w innym formacie. Format „custom” jest
skompresowany i umożliwia wybór tabel, które chcemy odtworzyć:

\begin{minted}{shell-session}
    $ pg_dump -U alicja moja_baza -Fc > zrzut.dump
    $ pg_restore -U alicja -j4 -t mojatablica zrzut.dump
\end{minted}

W powyższym przykładzie odtwarzamy ze zrzutu tablicę „mojatablica” używając 4
współbieżnych procesów.

\section{Zrzuty plików}

Innym podejściem przy tworzeniu kopii zapasowych jest bezpośrednie skopiowanie
plików bazy danych. Taki backup można wykonać bardzo szybko, jednak jego wadą
jest, iż potrzebujemy do jego wykonania pełnego zatrzymania bazy. W przeciwnym
wypadku pliki te mogą zawierać stan niespójny.

\section{Wykorzystanie plików WAL}

WAL (Write-Ahead Log) to metoda wykorzystywana wewnętrznie przez PostgreSQL w
celu zapewnienia spójności bazy danych. PostgreSQL loguje wszystkie operacje
\emph{zanim} je wykona. Dzięki temu może przywrócić spójny stan bazy w sytuacji
niespodziewanego przerwania działania serwera.

Logi WAL możemy wykorzystać również do przeprowadzania backupu bazy danych. W
metodzie tej łączymy bezpośrednie zrzuty plików z bazy danych z plikami WAL.
Zrzut plików dostarcza nam stanu bazy w określonym punkcie czasowym (ten stan
może być niespójny). Pliki WAL natomiast stanowią inkrementalny zapis zmian.

\subsection{Procedura tworzenia inkrementalnych kopii zapasowych bazy}

Aby skonfigurować rozpoczęcie archiwizowania plików WAL musimy skonfigurować w
pliku \texttt{postgresql.conf}:

\begin{enumerate}
    \item \texttt{wal\_level} powinno być ustawione na \texttt{archive} (dla
        PostgreSQL <= 9) lub \texttt{replica} (nowsze wersje)
    \item \texttt{archive\_mode} na \texttt{on}
    \item \texttt{archive\_command} powinno być komendą kopiującą plik o nazwie
        \texttt{\%f} oraz pełnej ścieżce \texttt{\%p} w odpowiednie miejsce
    \item \texttt{archive\_timeout} może być zmieniona, jeśli nasza baza
        wykazuje mały ruch, a insteresuje nas częsty zapis.
\end{enumerate}

Od tego momentu powinniśmy zacząć zbierać pliki WAL.

Aby wykonać zrzut plików bazy danych wykorzystać możemy polecenie
\texttt{pg\_basebackup}. Polecenie to zapisuje pliki bazy w postacie katalogu
lub archiwum \texttt{tar}.

Katalog będzie zawierał plik o nazwie \texttt{backup\_label}. Plik ten zawiera
informacje na temat numeru najwcześniejszego pliku WAL, który musi być
zachowany. Możemy usunąć wcześniejsze pliki WAL.

\subsection{Odzyskiwanie bazy danych}

Odzyskiwanie bazy danych należy przeprowadzić przy zatrzymanym serwerze. Należy
skopiować zarchiwizowane pliki bazy danych do katalogu klastra bazy danych.
Należy upewnić się, że pliki te mają właściwego właściciela (użytkownik
\texttt{postgres} i uprawnienia (niedostępne dla innych użytkowników).
Usunąć też możemy obecne w katalogu \texttt{pg\_xlog} stare pliki WAL, jeśli
posiadamy zarchiwizowane aktualne pliki.
Następnie tworzymy w tym katalogu plik o nazwie \texttt{recovery.conf}, który
powinien zawierać definicję parametru \texttt{restore\_command}, która kopiuje
plik z archiwum do miejsca wskazanego przez \texttt{\%p}.
Aby użytkownicy nie zakłócali procesu odzyskiwania dobrze jest uniemożliwić im
połączeń zanim uruchomimy serwer. Po uruchomieniu serwer wchodzi w stan
odzywskiwania. Gdy go ukończy plik \texttt{recovery.conf} zmieni nazwę na
\texttt{recovery.done}

\chapter{HA}

\section{WAL shipping}
PostgreSQL dysponuje wbudowaną możliwością konfiguracji replikacji poprzez
mechanizm zwany \emph{WAL shipping}. Jest to mechanizm oparty na tej samej
zasadzie, co odzyskiwanie bazy na podstawie plików WAL. Serwer \emph{master}
wysyła pliki WAL do serwerów \emph{slave}. Na tej podstawie serwery
\emph{slave} znajdujące się permanentnie w stanie \emph{recovery} aktualizują
swój stan. Serwery te mogą być skonfigurowane jako \emph{warm standby} i nie
przyjmować żadnych połączeń do momentu, gdy zostaną promowane jako nowy
\emph{master}. Mogą też służyć jako serwery \emph{read only} – serwer określamy
wtedy jako \emph{hot standby}.

Przykładowym rozwiązaniem pozwalającym skonfigurować \emph{WAL shipping} wraz z
automatyczną promocją w razie awarii serwera \emph{master} jest reprmgr.

\section{Replikacja logiczna}
W replikacji logicznej serwery publikują zmiany, jakie w nich zachodzą, które
mogą być odczytywane przez inne serwery. Metoda ta umożliwia konfigurację
\emph{multi-master}, w której więcej niż jeden serwer dopuszcza zapis.
Konfiguracja taka może powodować konflikty, które muszą być rozwiązywane bądź
ręcznie, bądź też automatycznie. Przykładowym rozwiązaniem umożliwiającym
replikację logiczną jest pglogical.

\section{Replikacja oparta o middleware}
W przypadku, gdy baza nie jest bardzo obciążona przez zapis, natomiast
wykonywane jest na niej dużo operacji odczytu, możliwe jest użycie tego
prostego rozwiązania. W rozwiązaniu tym \emph{load balancer} dba o to, aby
operacje zmieniające stan bazy danych były wysyłane do wszystkich serwerów.
Natomiast operace odczytu -- tylko do jednego. Takim rozwiązaniem jest pg-pool.


\end{document}
